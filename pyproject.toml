[tool.ruff]
extend-select = ["B", "I", "UP"]
line-length = 110
extend-exclude = ["tests/line-items"]
# ruff ignore file "xonsh_parser/ply/yacc.py"
[tool.ruff.per-file-ignores]
"xonsh_parser/ply/*.py" = [
    "F401", # [*] `ast.Or` imported but unused
    "E501", # Line too long (98 > 88 characters)
    "E731", #  [*] Do not assign a `lambda` expression, use a `def`
    "B007", # Loop control variable `rule` not used within loop body
    "B904", # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
]
"xonsh_parser/xast.py" = [
    "F401", # [*] `ast.Add` imported but unused
]
"xonsh_parser/parsers/*.py" = [
    "E501", # Line too long (121 > 88 characters)
]
"xonsh_parser/*.py" = [
    "E741" # Ambiguous variable name: `l` -- todo: fix this
]
"xonsh_parser/tokenize.py" = [
    "F821", # Undefined name `strstart`
    "F841", # [*] Local variable `strstart` is assigned to but never used
    "B904", # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
]


[tool.pytest.ini_options]
addopts = ""


[project.optional-dependencies]
lint = [
    "black",
    "mypy",
    "ruff",]
test = [
    "pytest",
    "pytest-cov",
    ]
docs = [
    "mkdocs-material",
    "mkdocstrings[python]",
]
profile = [
    "asv>=0.5.1",
    "virtualenv>=20.21.0",
    "pympler>=1.0.1",
    "guppy3>=3.1.2",
]
dev = [
    "monkeytype>=23.3.0",
    "pegen @ git+https://github.com/we-like-parsers/pegen",
    "lark>=1.1.5",
    "setuptools-rust>=1.5.2",
]

[tool.hatch.envs.default.scripts]
test = "pytest"
test-cov-xml = "pytest --cov=xonsh_parser/ --cov-report=term-missing --cov-report=xml"
lint = [
  "black .",
  "ruff --fix .",
  "mypy xonsh_parser/",
]
lint-check = [
  "black --check .",
  "ruff .",
  "mypy xonsh_parser/",
]
bench = [
    "asv run --python=same --show-stderr", # quickly run benchmarks
]
bench-view = [
    "asv publish",
    "asv preview",
]
type = [
    "monkeytype run tests/sample.py",
    "monkeytype list-modules",
    'echo "monkeytype apply xonsh_parser"',
]
docs-serve = "mkdocs serve"
docs-build = "mkdocs build"

[build-system]
requires = ["setuptools", "wheel", "versioningit"]
build-backend = "setuptools.build_meta"

[tool.versioningit.format]
distance = "{base_version}+{distance}.{vcs}{rev}"
dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
distance-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"

[project]
name = "xonsh-parser"
authors = [
    { name = "xonsh-parser", email = "jnoortheen@gmail.com" }
]
description = "Xonsh parser using PLY"
readme = "README.md"
dynamic = ["version"]
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
]
requires-python = ">=3.9"
dependencies = [
    "mypy-extensions>=1.0.0",
]

[tool.setuptools]
packages = ['xonsh_parser']

[project.urls]
Documentation = "https://jnoortheen.github.io/xonsh-parser/"
Source = "https://github.com/jnoortheen/xonsh-parser"

[tool.black]
# exclude extend to file "xonsh_parser/ply/yacc.py"
extend-exclude = ".+ply/yacc.py"

[tool.mypy]
# mypy ignore file "xonsh_parser/ply/yacc.py"
packages = "xonsh_parser"
ignore_missing_imports = true
warn_unused_configs = true
#warn_unused_ignores = true
#strict_optional = false
#warn_redundant_casts = true
exclude = [
    'xonsh_parser/ply/.*.py',
    'xonsh_parser/parsers/'
]

[[tool.mypy.overrides]]
module = "xonsh_parser.ply.yacc"
ignore_errors = true

[[tool.mypy.overrides]]
module = "xonsh_parser.ply.lrparser"
allow_untyped_defs = false
#strict = true
