@subheader """\
from ast import literal_eval

from pegen.grammar import (
    Alt,
    Cut,
    Forced,
    Gather,
    Group,
    Item,
    Lookahead,
    LookaheadOrCut,
    MetaTuple,
    MetaList,
    NameLeaf,
    NamedItem,
    NamedItemList,
    NegativeLookahead,
    Opt,
    Plain,
    PositiveLookahead,
    Repeat0,
    Repeat1,
    Rhs,
    Rule,
    RuleList,
    RuleName,
    Grammar,
    StringLeaf,
)
from tokenize import TokenInfo

def join_tokens(atoms: list) -> str:
    first = atoms[0]
    string = first.string
    for at in atoms[1:]:
        if first.end == at.start:
            string += at.string
        else:
            string += " " + at.string
        first = at
    return string
"""

start[Grammar]: grammar ENDMARKER { grammar }

grammar[Grammar]:
    | metas rules { Grammar(rules, metas) }
    | rules { Grammar(rules, []) }

metas[MetaList]:
    | meta metas { [meta] + metas }
    | meta { [meta] }

meta[MetaTuple]:
    | "@" NAME NEWLINE { (name.string, None) }
    | "@" a=NAME b=NAME NEWLINE { (a.string, b.string) }
    | "@" NAME STRING NEWLINE { (name.string, literal_eval(string.string)) }

rules[RuleList]:
    | rule rules { [rule] + rules }
    | rule { [rule] }

rule[Rule]:
    | rulename memoflag? ":" alts NEWLINE INDENT more_alts DEDENT {
          Rule(rulename[0], rulename[1], Rhs(alts.alts + more_alts.alts), memo=opt) }
    | rulename memoflag? ":" NEWLINE INDENT more_alts DEDENT {
          Rule(rulename[0], rulename[1], more_alts, memo=opt) }
    | rulename memoflag? ":" alts NEWLINE { Rule(rulename[0], rulename[1], alts, memo=opt) }

rulename[RuleName]:
    | NAME annotation { (name.string, annotation) }
    | NAME { (name.string, None) }

# In the future this may return something more complicated
memoflag[str]:
    | '(' "memo" ')' { "memo" }

alts[Rhs]:
    | alt "|" alts { Rhs([alt] + alts.alts)}
    | alt { Rhs([alt]) }

more_alts[Rhs]:
    | "|" alts NEWLINE more_alts { Rhs(alts.alts + more_alts.alts) }
    | "|" alts NEWLINE { Rhs(alts.alts) }

alt[Alt]:
    | items '$' action { Alt(items + [NamedItem(None, NameLeaf('ENDMARKER'))], action=action) }
    | items '$' { Alt(items + [NamedItem(None, NameLeaf('ENDMARKER'))], action=None) }
    | items action { Alt(items, action=action) }
    | items { Alt(items, action=None) }

items[NamedItemList]:
    | named_item items { [named_item] + items }
    | named_item { [named_item] }

named_item[NamedItem]:
    | NAME annotation '=' ~ item {NamedItem(name.string, item, annotation)}
    | NAME '=' ~ item {NamedItem(name.string, item)}
    | item {NamedItem(None, item)}
    | it=forced_atom {NamedItem(None, it)}
    | it=lookahead {NamedItem(None, it)}

forced_atom[LookaheadOrCut]:
    | '&''&' ~ atom {Forced(atom)}

lookahead[LookaheadOrCut]:
    | '&' ~ atom {PositiveLookahead(atom)}
    | '!' ~ atom {NegativeLookahead(atom)}
    | '~' {Cut()}

item[Item]:
    | '[' ~ alts ']' {Opt(alts)}
    |  atom '?' {Opt(atom)}
    |  atom '*' {Repeat0(atom)}
    |  atom '+' {Repeat1(atom)}
    |  sep=atom '.' node=atom '+' {Gather(sep, node)}
    |  atom {atom}

atom[Plain]:
    | '(' ~ alts ')' {Group(alts)}
    | NAME {NameLeaf(name.string) }
    | STRING {StringLeaf(string.string)}

# Mini-grammar for the actions and annotations

action[str]: "{" ~ target_atoms "}" { join_tokens(target_atoms) }
annotation[str]: "[" ~ target_atoms "]" { join_tokens(target_atoms) }

target_atoms[list]:
    | target_atom target_atoms { [*target_atom, *target_atoms] }
    | target_atom { target_atom }

target_atom[list]:
    | l="{" ~ atoms=target_atoms? r="}" { [l, *(atoms or []), r] }
    | l="[" ~ atoms=target_atoms? r="]" { [l, *(atoms or []), r] }
    | l=FSTRING_START m=target_fstring_middle* r=FSTRING_END {
        [TokenInfo(
            string=l.string + "".join(m) + r.string,
            start=l.start,end=r.end,line=l.line,type=1)]
     }
    | a=NAME b="*" { [a, b] }
    | a=(NAME | NUMBER | STRING | "?" | ":") { [a] }
    | !"}" !"]" OP { [op] }

target_fstring_middle[str]:
    | FSTRING_MIDDLE { fstring_middle.string }
    | "{" { "{" }
    | "}" { "}" }
    | target_atom { join_tokens(target_atom) }
